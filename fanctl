#!/bin/bash

BOOT_CONFIG_PATH='/boot/config.txt'
FANCTL_DTOVERLAY='dtoverlay=fanctl'
PWM_DTOVERLAY='dtoverlay=pwm'
FANCTL_CONFIG_DELIM_STR='FANCTL_BOOT_CONFIG:75d5b2b2-268c-4006-8b61-91fcaf961d2d'

read -r -d '' BOOT_CONFIG_HEADER <<- END
[all]
# Enable pwm with default settings for fan control
# WARNING: Automatically generated by fanctl installer, DO NOT MODIFY otherwise the uninstall process may not work
# $FANCTL_CONFIG_DELIM_STR
END

read -r -d '' HELP <<- END
$(basename $0) [OPTION]
OPTION:
    -i | --install      Compile the kernel module and installs the driver (default action)
    -u | --uninstall    Remove the driver
    -t | --test         Compile the kernel module in debug mode and runs a simple test (requires stress-ng to be installed)
    -h | --help         Print this help message 
END

read -r -d '' PYTHON_REMOVE_BOOT_CONFIG <<- END
from functools import reduce
from operator import add

if __name__ == "__main__":
    lines = []
    skip_line = False
    with open('$BOOT_CONFIG_PATH') as boot_config:
        for line in boot_config:
            if line.startswith('# $FANCTL_CONFIG_DELIM_STR'):
                skip_line = not skip_line
                if skip_line:
                    lines = lines[:-3]
            elif not skip_line:
                lines.append(line)
    print(reduce(add, lines, ''))
END

function add_boot_config() {
    BOOT_CONFIG=$(cat $BOOT_CONFIG_PATH)
    HAS_PWM_DTOVERLAY=$(echo -e "$BOOT_CONFIG" | grep "$PWM_DTOVERLAY")
    HAS_FANCTL_DTOVERLAY=$(echo -e "$BOOT_CONFIG" | grep "$FANCTL_DTOVERLAY")
    if [ -z "$HAS_PWM_DTOVERLAY" ] || [ -z "$HAS_FANCTL_DTOVERLAY" ]; then
        echo -e "\n$BOOT_CONFIG_HEADER" >> $BOOT_CONFIG_PATH
    fi
    if [ -z "$HAS_PWM_DTOVERLAY" ]; then
        echo -e "$PWM_DTOVERLAY" >> $BOOT_CONFIG_PATH
    fi
    if [ -z "$HAS_FANCTL_DTOVERLAY" ]; then
        echo -e "$FANCTL_DTOVERLAY" >> $BOOT_CONFIG_PATH
    fi
    if [ -z "$HAS_PWM_DTOVERLAY" ] || [ -z "$HAS_FANCTL_DTOVERLAY" ]; then
        echo -e "# $FANCTL_CONFIG_DELIM_STR" >> $BOOT_CONFIG_PATH
    fi
}

function remove_boot_config() {
    BOOT_CONFIG=$(python3 -c "$PYTHON_REMOVE_BOOT_CONFIG")
    echo -e "$BOOT_CONFIG" > $BOOT_CONFIG_PATH
}

if [[ $EUID -ne 0 ]]; then
    echo "$(basename $0) requires root privileges."
    exit -1
fi

if [ $# -gt 1 ]; then
    echo "Unknown argument(s)."
elif [ $# -eq 0 ] || [ $1 == "-i" ] || [ $1 == "--install" ]; then
    make || (make clean && exit $?)
    add_boot_config || (make clean && exit $?)
    cp "$(basename $0)" /usr/local/bin/
    echo "The driver is now installed; the system will soon reboot..."
    sleep 10
    reboot now
elif [ $1 == "-u" ] || [ $1 == "--uninstall" ]; then
    rmmod $(basename $0).ko
    rm "/lib/modules/$(uname -r)/extra/$(basename $0).ko.xz"
    rm "/usr/local/bin/$(basename $0)"
    remove_boot_config
    depmod -a
    echo "The driver is now uninstalled; the system will soon reboot..."
    sleep 10
    reboot now
elif [ $1 == "-t" ] || [ $1 == "--test" ]; then
    if ! [ -e '/sys/class/pwm/pwmchip0' ]; then
        LOADED_OVERLAY=1
        dtoverlay pwm || exit $?
    fi
    make DEBUG=1 build || exit $?
    cp fanctl.dtbo /boot/overlays
    dtoverlay "$(basename $0)" || (make clean && exit $?)
    insmod "$(basename $0).ko" || (make clean && exit $?)
    stress-ng --cpu-method fft --aggressive --cpu 1 --timeout 90s
    sleep 90s
    stress-ng --cpu-method fft --aggressive --cpu 16 --timeout 60s
    sleep 60s
    rmmod "$(basename $0).ko"
    dtoverlay -r $(basename $0)
    rm "/boot/overlays/$(basename $0).dtbo"
    make clean
    if [ -v $LOADED_OVERLAY ]; then
        dtoverlay -r pwm
    fi
elif [ $1 == "-h" ] || [ $1 == "--help" ]; then
    echo "$HELP"
else
    echo "Unknown argument(s)."
fi
